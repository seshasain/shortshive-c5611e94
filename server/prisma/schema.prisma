// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public"]
}

// Auth models in auth schema
model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  isVerified  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  profile     Profile?
  
  @@schema("public")
}

model VerificationToken {
  id        String    @id @default(uuid())
  token     String    @unique
  email     String
  expires   DateTime
  createdAt DateTime  @default(now())
  
  @@schema("public")
}

// Profile model for storing user data
model Profile {
  id         String    @id @default(uuid())
  userId     String    @unique
  email      String    @unique
  full_name  String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  stories    Story[]
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}

// Story models in public schema
model Story {
  id          String      @id @default(uuid())
  title       String
  description String?
  userId      String
  profile     Profile     @relation(fields: [userId], references: [userId])
  characters  Character[]
  scenes      Scene[]
  animations  Animation[]
  savedStory  SavedStory?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@schema("public")
}

model Character {
  id          String   @id @default(uuid())
  name        String
  description String?
  storyId     String
  story       Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@schema("public")
}

model Scene {
  id                  String      @id @default(uuid())
  sceneNumber         Int
  durationEstimate    Int
  visualDescription   String      @db.Text
  dialogueOrNarration String      @db.Text
  storyId             String
  story               Story       @relation(fields: [storyId], references: [id], onDelete: Cascade)
  animations          Animation[]
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  @@schema("public")
}

model Animation {
  id              String    @id @default(uuid())
  storyId         String
  story           Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  sceneId         String
  scene           Scene     @relation(fields: [sceneId], references: [id], onDelete: Cascade)
  status          String    // PENDING, PROCESSING, COMPLETED, FAILED
  videoUrl        String?   // URL of the generated video
  thumbnailUrl    String?   // URL of the video thumbnail
  errorMessage    String?   // Store any error messages
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  metadata        Json?     // Store additional metadata about the animation
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@schema("public")
}

// Model for storing saved stories
model SavedStory {
  id              String    @id @default(uuid())
  storyId         String    @unique
  story           Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  status          String    // DRAFT, SAVED_WITH_ERRORS, COMPLETED
  errorDetails    Json?     // Store any error details or generation issues
  generationState Json?     // Store the state of generation when saved
  notes           String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@schema("public")
}
